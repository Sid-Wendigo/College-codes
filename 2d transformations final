import numpy as np

def get_initial_matrix():
    print("Enter the initial 3x3 transformation matrix:")
    matrix = np.zeros((3, 3))
    for i in range(3):
        for j in range(3):
            matrix[i, j] = float(input(f"Element [{i+1}, {j+1}]: "))
    print("Initial transformation matrix:")
    print(matrix)
    return matrix

def get_transformation_matrix(initial_matrix):
    matrix = initial_matrix
    while True:
        print("\nSelect a transformation:")
        print("1. Scaling")
        print("2. Rotation")
        print("3. Translation")
        print("4. Done")
        choice = input("Enter your choice (1-4): ")
        if choice == '1':
            sx = float(input("Enter scaling factor for X: "))
            sy = float(input("Enter scaling factor for Y: "))
            scale = np.eye(3)
            scale[0, 0] = sx
            scale[1, 1] = sy
            matrix = scale @ matrix
            print("Scaling Transformation Matrix:")
            print(matrix)
        elif choice == '2':
            angle = float(input("Enter rotation angle (degrees): "))
            radians = np.radians(angle)
            cos_a, sin_a = np.cos(radians), np.sin(radians)
            rotate = np.eye(3)
            rotate[0, 0] = cos_a
            rotate[0, 1] = -sin_a
            rotate[1, 0] = sin_a
            rotate[1, 1] = cos_a
            matrix = rotate @ matrix
            print("Rotation Transformation Matrix:")
            print(matrix)
        elif choice == '3':
            tx = float(input("Enter translation on X-axis: "))
            ty = float(input("Enter translation on Y-axis: "))
            translate = np.eye(3)
            translate[0, 2] = tx
            translate[1, 2] = ty
            matrix = translate @ matrix
            print("Translation Transformation Matrix:")
            print(matrix)
        elif choice == '4':
            print("Final Transformation Matrix:")
            print(matrix)
            return matrix
        else:
            print("Invalid choice. Try again.")

def apply_transformation(matrix):
    transformed_matrix = matrix
    print("\nTransformed Matrix:")
    print(transformed_matrix)
    return transformed_matrix

def main():
    print("Welcome to the Transformation Tool!")
    initial_matrix = get_initial_matrix()
    transformation_matrix = get_transformation_matrix(initial_matrix)
    transformed_matrix = apply_transformation(transformation_matrix)
    print("\nTransformation complete!")

if __name__ == "__main__":
    main()
